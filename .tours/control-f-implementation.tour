{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Control F implementation",
  "steps": [
    {
      "file": "controlF.cpp",
      "description": "1. std::vector<int> indexes;: Creates a vector to store the starting indices of pattern occurrences in the text.\n2. The core KMP algorithm is used to find occurrences of the pattern in the text and record their starting indices in the indexes vector.\n3. The function outputs the number of occurrences and the positions of these occurrences in a hypothetical grid with an 80-character width. It calculates the row and column positions based on this width.\n",
      "line": 22,
      "title": "KMP implementation"
    },
    {
      "file": "controlF.cpp",
      "description": "1. int len = 0; lps[0] = 0;: Initialize the length of the previous longest prefix suffix (len) and set the first value in the LPS array (lps[0]) to 0.\n2. int i = 1;: Start iterating from the second character of the pattern.\n3. The while (i < M) loop continues until the end of the pattern is reached.\n4. Inside the loop:\n-If the current character in the pattern (pat[i]) matches the character at the previous length (pat[len]):\n  1. Increment the length (len).\n  2. Assign the length to the current position in the LPS array (lps[i]).\n  Move to the next character in both the pattern and the LPS array (i++).\n \n-If there is a mismatch and the length is not 0:\n  Update the length to the value at the previous position in the LPS array (len = lps[len - 1]).\n\n\n-If there is a mismatch and the length is 0:\n  1. Assign 0 to the current position in the LPS array (lps[i] = 0).\n  2. Move to the next character in the pattern (i++).\n",
      "line": 80,
      "title": "LPS for KMP mplementation"
    },
    {
      "file": "controlF.cpp",
      "description": "1. int max(int a, int b) {: This line declares a function named max that takes two integer parameters (a and b) and returns an integer.\n2. if (a > b) {: This is an if statement that checks if the value of a is greater than the value of b.\n3. Inside the if block: If a is greater than b, the function returns the value of a with return a;.\n4. If the condition in the if statement is not true (i.e., if a is not greater than b), the control goes to the next line outside the if block.\n5. return b;: This line is executed when either a is not greater than b or when a is equal to b. In either case, the function returns the value of b.\n",
      "line": 107,
      "title": "Max for BM mplementation"
    },
    {
      "file": "controlF.cpp",
      "description": "1. for(int i = 0; i < 256; i++){ badchar[i] = -1; }: Initializes the badchar array with -1 for all 256 ASCII characters. This is done to set a default value that indicates a character is not present in the key.\n\n\n2. for(int i = 0; i < keySize; i++){ int ascii = (int) key[i]; badchar[ascii] = i; }: Processes each character in the key string and stores the index of the last occurrence of that character in the badchar array. This information will be used by the Boyer-Moore algorithm to determine the maximum possible shift when a mismatch occurs.",
      "line": 123,
      "title": "bad char for BM mplementation"
    },
    {
      "file": "controlF.cpp",
      "description": "1. std::vector<int> indexes;: Creates a vector to store the starting indices of pattern occurrences in the text.\n2. The Boyer-Moore algorithm is used to find occurrences of the pattern in the text and record their starting indices in the indexes vector.\n3. The function outputs the number of occurrences and the positions of these occurrences in a grid-like format. It calculates the row and column positions based on a hypothetical 80-character width.\n",
      "line": 144,
      "title": "BM mplementation"
    },
    {
      "file": "controlF.cpp",
      "description": "1. Function Parameters:\nTakes three parameters: const std::string& s, const std::string& key, and std::string function.\n2. String Searching Algorithm Selection:\nChecks the value of the function parameter to determine which string searching algorithm to call.\n3. Basic String Search:\nIf function is equal to \"Basic\" or \"basic,\" it calls the basic function with parameters s and key.\n4. KMP String Search:\nIf function is equal to \"KMP\" or \"kmp,\" it calls the KMPSearch function with parameters s and key.\n5. Boyer-Moore String Search:\nIf function is equal to \"Boyer-Moore\" or \"Boyer Moore,\" it calls the BoyerMoore function with parameters s and key.\n6. Invalid Function Handling:\nIf function does not match any of the valid options, it prints an error message to the console: \"Invalid function!\"\n",
      "line": 238,
      "title": "how it works"
    },
    {
      "file": "controlF.cpp",
      "description": "1. Command-Line Argument Validation:\nCheck whether the correct number of command-line arguments is provided (at least 3).\n2. File Opening:\nOpen the specified file using the filename provided in the command-line arguments.\n3. File Reading:\nRead the content of the file line by line and concatenate it into the data string.\n4. File Closing:\nClose the file after reading its content.\n5. User Input for String Searching Function:\nPrompt the user to choose a string searching function (\"Basic,\" \"KMP,\" or \"Boyer-Moore\").\n6. User Input Validation:\nEnsure that the user's input for the selected function is valid. Repeat the prompt until a valid input is provided.\n7. Search Key Extraction:\nExtract the search key from the command-line arguments.\n8. String Searching Function Call:\nCall the callFunctions function with the data from the file, the search key, and the selected string searching function.\n",
      "line": 264,
      "title": "Control F's main"
    }
  ],
  "ref": "main"
}